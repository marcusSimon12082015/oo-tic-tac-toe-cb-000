
./lib/tic_tac_toe.rb
  TicTacToe
    #initialize
      assigns an instance variable @board to an array with 9 blank spaces " "
    WIN_COMBINATIONS
      defines a constant WIN_COMBINATIONS with arrays for each win combination
    #display_board
      prints arbitrary arrangements of the board
    #input_to_index
      accepts the user's input (a string) as an argument
      converts the user's input (a string) into an integer
      converts the user's input from the user-friendly format (on a 1-9 scale) to the array-friendly format (where the first index starts at 0)
    #move
      allows "X" player in the top left and "O" in the middle
    #position_taken?
      returns true/false based on whether the position on the board is already occupied
    #valid_move?
      returns true/false based on whether the position is already occupied
      checks that the attempted move is within the bounds of the game board
    #turn_count
      counts occupied positions
    #current_player
      returns the correct player, X, for the third move
      returns the correct player, O, for the fourth move
    #turn
      receives user input via the gets method
      calls #input_to_index, #valid_move?, and #current_player
      makes valid moves and displays the board
      asks for input again after a failed validation
    #won?
      returns false for a draw
      returns the winning combo for a win
    #full?
      returns true for a draw
      returns false for an in-progress game
    #draw?
      returns true for a draw
      returns false for a won game
      returns false for an in-progress game
    #over?
      returns true for a draw
      returns true for a won game
      returns false for an in-progress game
    #winner
      return X when X won
      returns O when O won
      returns nil when no winner

./lib/tic_tac_toe.rb
  TicTacToe
    #play
      asks for players input on a turn of the game
      checks if the game is over after every turn
      plays the first turn of the game
      plays the first few turns of the game
      checks if the game is won after every turn
      checks if the game is draw after every turn
      stops playing if someone has won
      congratulates the winner X
      congratulates the winner O
      stops playing in a draw
      prints "Cat's Game!" on a draw
      plays through an entire game

bin/tictactoe
  instantiates an instance of TicTacToe (FAILED - 1)

Failures:

  1) bin/tictactoe instantiates an instance of TicTacToe
     Failure/Error: expect(TicTacToe).to receive(:new).and_return(game)

       (TicTacToe (class)).new(*(any args))
           expected: 1 time with any arguments
           received: 0 times with any arguments
     # ./spec/03_cli_spec.rb:8:in `block (2 levels) in <top (required)>'

Finished in 0.19204 seconds (files took 0.18576 seconds to load)
43 examples, 1 failure

Failed examples:

rspec ./spec/03_cli_spec.rb:2 # bin/tictactoe instantiates an instance of TicTacToe

